#pragma kernel Simulate
#pragma kernel Draw
#pragma kernel Clear

RWTexture2D<float4> Output;
float4 _Time;

float FadeInSpeed, FadeOutSpeed;
int PositionsCount;
StructuredBuffer<float3> Positions;
float XFactor;
float MoveSpeed, TurnSpeed;
float EnergyFactor;

struct Entity
{
    float2 pos;
    float2 lastPos;
    float2 dir;
    float energy;
};
RWStructuredBuffer<Entity> Entities;

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

[numthreads(32,1,1)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
    uint count, _;
    Entities.GetDimensions(count, _);
    if(id.x >= count) return;
    Entity entity = Entities[id.x];
    if(entity.energy <= 0.001 || entity.energy > 3)
    {
        uint rx = wang_hash(entity.pos.x + id.x) % 1;
        uint ry = wang_hash(entity.pos.y + id.x) % 1;
        entity.pos = 0;// float2(rx, ry);
        entity.dir = normalize(float2(sin(id.x +  _Time.x), cos(id.x + _Time.x))) * _Time.y;
        entity.pos += normalize(entity.dir) * 5;
        // entity.pos += entity.dir * 3;
        entity.lastPos = float2(entity.pos);
        entity.dir *= -1;
        entity.energy = 1;
    }
    float res_dot = -1;
    float res_rating = 0;
    float3 res_target = 0;
    float2 res_dir = 0;
    count = PositionsCount;
    for(int i = 0; i < count; i++)
    {
        float3 pos = Positions[i];
        float2 dir = pos.xy - entity.pos;
        float dist = length(dir);
        if(dist < .01) continue;
        float2 ndir = normalize(dir);
        float d = dot(ndir, normalize(entity.dir));
        if(d < -.99) continue;
        float distRating = saturate(1/(dist*1000));
        float rating = min(d, distRating);
        if(rating > res_rating)// && (id.x + i) % (uint)(count*.02) == 0) 
        {
            res_rating = rating;
            res_dot = d;
            res_target = pos;
            res_dir = dir;
        }
    }
    entity.energy -= max(_Time.w * 0.001 * EnergyFactor, length(entity.pos) * _Time.w * .005 * MoveSpeed * EnergyFactor);
    entity.lastPos = entity.pos;
    float energyFactor = 1/entity.energy;
    float t = TurnSpeed * _Time.w / max(.5,length(res_dir));
    t *= energyFactor;
    entity.dir = lerp(entity.dir, entity.dir + res_dir, t);
    entity.dir *= 1 - (_Time.w + .02);
    t =  _Time.w * MoveSpeed * energyFactor;
    float2 step = entity.dir;
    step = lerp(step, normalize(step), 1-entity.energy);
    entity.pos = lerp(entity.pos, entity.pos + step, saturate(t));
    Entities[id.x] = entity; 
}


[numthreads(32,1,1)]
void Draw(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Output.GetDimensions(width, height);
    Entity entity = Entities[id.x];
    float dist = length(entity.pos - entity.lastPos);
    float4 color = lerp(float4(0,0,0,1), 1, entity.energy*2);
    for(float i = 0; i < dist; i += 1/dist)
    {
        float2 pt = lerp(entity.lastPos, entity.pos, i);;
        uint2 pixel = uint2(pt.x*XFactor + width*.5, pt.y * XFactor + height * .5);
        if(pixel.x <= 0 || pixel.x >= width || pixel.y <= 0 || pixel.y >= height) break;
        Output[pixel] = lerp(Output[pixel], color, _Time.w * FadeInSpeed);
    }
}


[numthreads(32,32,1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
    Output[id.xy] = lerp(Output[id.xy], 0, _Time.w * FadeOutSpeed);
}